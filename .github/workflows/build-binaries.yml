name: Build Cross-Platform Binaries

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write  # Required to upload release assets

jobs:
  build:
    name: Build ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    env:
      WAKATERM_BUILD_TYPE: cython
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64 build
          - os: linux
            arch: x86_64
            runner: ubuntu-latest
            python-arch: x64
            use_qemu: false
          
          # Linux ARM64 build using QEMU emulation
          - os: linux
            arch: arm64
            runner: ubuntu-latest
            python-arch: arm64
            use_qemu: true

          # macOS builds
          - os: macos
            arch: x86_64
            runner: macos-13  # Intel runner
            python-arch: x64
            use_qemu: false
          - os: macos
            arch: arm64
            runner: macos-14  # Apple Silicon runner (M1/M2)
            python-arch: arm64
            use_qemu: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        if: matrix.use_qemu
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Python (Native)
        if: ${{ !matrix.use_qemu }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: ${{ matrix.python-arch }}

      - name: Build with QEMU (ARM64 Linux)
        if: matrix.use_qemu
        run: |
          docker run --rm --platform linux/arm64 \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            python:3.11-slim \
            bash -c "
              apt-get update && apt-get install -y gcc g++ make
              python -m pip install --upgrade pip
              pip install -r requirements.txt
              export WAKATERM_BUILD_TYPE=cython
              python build.py --cython
              python build.py --cython --test
            "

      - name: Install dependencies (Native)
        if: ${{ !matrix.use_qemu }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build binary (Native)
        if: ${{ !matrix.use_qemu }}
        run: python build.py --cython

      - name: Test binary (Native)
        if: ${{ !matrix.use_qemu }}
        run: python build.py --cython --test

      - name: Create release artifact
        run: |
          mkdir -p release
          # Copy both binaries (Unix only - no Windows support)
          cp binaries/wakaterm-${{ matrix.os }}-${{ matrix.arch }} release/ 2>/dev/null || true
          cp binaries/wakatermctl-${{ matrix.os }}-${{ matrix.arch }} release/ 2>/dev/null || true
          # Also copy distribution directories
          cp -r binaries/wakaterm-dist release/ 2>/dev/null || true  
          cp -r binaries/wakatermctl-dist release/ 2>/dev/null || true
          cp README.md LICENSE release/
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wakaterm-${{ matrix.os }}-${{ matrix.arch }}
          path: release/
          retention-days: 90

  release:
    name: Attach Files to Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release archive
        run: |
          mkdir -p release
          cd artifacts
          for dir in */; do
            if [ -d "$dir" ]; then
              cd "$dir"
              # Unix binaries only (no Windows support)
              tar -czf "../../release/${dir%/}.tar.gz" *
              cd ..
            fi
          done

      - name: Attach Files to Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get the release tag
          TAG_NAME="${{ github.event.release.tag_name }}"
          echo "Attaching files to release: $TAG_NAME"
          
          # Upload all release files to the existing release
          for file in release/*; do
            if [ -f "$file" ]; then
              echo "Uploading: $file"
              gh release upload "$TAG_NAME" "$file" --clobber
            fi
          done